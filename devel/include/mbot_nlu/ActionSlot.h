// Generated by gencpp from file mbot_nlu/ActionSlot.msg
// DO NOT EDIT!


#ifndef MBOT_NLU_MESSAGE_ACTIONSLOT_H
#define MBOT_NLU_MESSAGE_ACTIONSLOT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mbot_nlu/Slot.h>

namespace mbot_nlu
{
template <class ContainerAllocator>
struct ActionSlot_
{
  typedef ActionSlot_<ContainerAllocator> Type;

  ActionSlot_()
    : intention()
    , slots()  {
    }
  ActionSlot_(const ContainerAllocator& _alloc)
    : intention(_alloc)
    , slots(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _intention_type;
  _intention_type intention;

   typedef std::vector< ::mbot_nlu::Slot_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mbot_nlu::Slot_<ContainerAllocator> >::other >  _slots_type;
  _slots_type slots;





  typedef boost::shared_ptr< ::mbot_nlu::ActionSlot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mbot_nlu::ActionSlot_<ContainerAllocator> const> ConstPtr;

}; // struct ActionSlot_

typedef ::mbot_nlu::ActionSlot_<std::allocator<void> > ActionSlot;

typedef boost::shared_ptr< ::mbot_nlu::ActionSlot > ActionSlotPtr;
typedef boost::shared_ptr< ::mbot_nlu::ActionSlot const> ActionSlotConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mbot_nlu::ActionSlot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mbot_nlu::ActionSlot_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mbot_nlu

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'mbot_nlu': ['/home/maelic/robobreizh_simu_ws/src/robobreizh_dialog/mbot_natural_language_processing/mbot_nlu/ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mbot_nlu::ActionSlot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mbot_nlu::ActionSlot_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mbot_nlu::ActionSlot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mbot_nlu::ActionSlot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mbot_nlu::ActionSlot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mbot_nlu::ActionSlot_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mbot_nlu::ActionSlot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95d873f61ab7124887d29a04f0f7906c";
  }

  static const char* value(const ::mbot_nlu::ActionSlot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95d873f61ab71248ULL;
  static const uint64_t static_value2 = 0x87d29a04f0f7906cULL;
};

template<class ContainerAllocator>
struct DataType< ::mbot_nlu::ActionSlot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mbot_nlu/ActionSlot";
  }

  static const char* value(const ::mbot_nlu::ActionSlot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mbot_nlu::ActionSlot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string intention\n\
Slot[] slots\n\
\n\
================================================================================\n\
MSG: mbot_nlu/Slot\n\
string type\n\
string data\n\
";
  }

  static const char* value(const ::mbot_nlu::ActionSlot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mbot_nlu::ActionSlot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.intention);
      stream.next(m.slots);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionSlot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mbot_nlu::ActionSlot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mbot_nlu::ActionSlot_<ContainerAllocator>& v)
  {
    s << indent << "intention: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.intention);
    s << indent << "slots[]" << std::endl;
    for (size_t i = 0; i < v.slots.size(); ++i)
    {
      s << indent << "  slots[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mbot_nlu::Slot_<ContainerAllocator> >::stream(s, indent + "    ", v.slots[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MBOT_NLU_MESSAGE_ACTIONSLOT_H
